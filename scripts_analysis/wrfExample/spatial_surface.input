#########################################################################
#------		INPUT FILE	INPUT FILE	INPUT FILE	 
#-----------------------------------------------------------------------#
#						 										
#	Evaluation Protocol: Spatial Statistics (Calculations and Plotting)		
#									
#	Version: 	1.1					 	
#	Date:		March 08, 2005					
#	Contributors:	Robert Gilliam					
#						 			
#	Developed by and for NOAA, ARL, ASMD on assignment to US EPA	
#-----------------------------------------------------------------------#
# Change LOG
# daily-spatial-1.1 (06/15/2004)	
#	Initial deveopment: The program currently reads a configuration file
#	that is placed in the run directory and includes all speficiations for the query
#	as well as directory structure information, module options, etc.
# daily-spatial-1.2 (03/09/2005) v1.2	
#	Protocol development: Input files for the daily-spatial.R script have been modified. Modifications
#	include an update to the in-code documentation and general clean up of input file
#-----------------------------------------------------------------------
# Version 1.2, May 6, 2013, Rob Gilliam
#  - better formatting of input file
#  
#########################################################################
#########################################################################
# General Information
#########################################################################
 model     <-Sys.getenv("AMET_PROJECT")
 date      <-c(Sys.getenv("AMET_DATES"),Sys.getenv("AMET_DATEE"))    
 figid_sub <-""   
 figdir    <-Sys.getenv("AMET_OUT")	# Figure directory
 savedir   <-Sys.getenv("AMET_OUT")	# R output data file save directory

 histplot  <-F      # Plot a histogram of station statistics
 shadeplot <-F      # Plot shaded statistics plot in addition to point statistics plot (T-true, F-false)
 sres      <-0.10   # resolution of shaded plot in degrees (default is 0.25)

#########################################################################
#	Database/Tables/Directory Information
#########################################################################
 daily       <-F
 wantfigs    <-T						# Flag to generate figures
 wantsave    <-T						# Flag to save station statistics data
 textstats   <-as.logical(Sys.getenv("AMET_TEXTSTATS"))
 checksave   <-T 
 t.test.flag <-F

 sfctable	<-paste(model,"_surface",sep="")		# Surface data table in evaluation database

 thresh   <-24/3        # Set to minimum number of mod-obs pairs for consideration (ndays*24 = full dataset)
     
 convert  <-"convert"		# ImageMagick convert command (used to crop images, and if not present or aviliable then no problem, you will just have slightly large marigins in your figures

#########################################################################
#	Plot Ouput Format
#########################################################################
 plotfmt   <-Sys.getenv("AMET_PTYPE")						# Plot format (png,pdf,jpg,eps)
 plotsize  <-1.50
 symb      <-19		  # Plot symbol (15-square,19-circle)
 symbsiz   <-1.35		# Plot symbol size (0.5 very small to 1.5 large, 1 suites most applications)
 plotopts  <-list(plotfmt=plotfmt,plotsize=plotsize,symb=symb,symbsiz=symbsiz)

#########################################################################
#-- Manual plot bounds, Note: comment out bounds below for automatic setting
#########################################################################
 lats    <-as.numeric(unlist(strsplit(Sys.getenv("AMET_BOUNDS_LAT")," ")))[1]
 latn    <-as.numeric(unlist(strsplit(Sys.getenv("AMET_BOUNDS_LAT")," ")))[2]
 lonw    <-as.numeric(unlist(strsplit(Sys.getenv("AMET_BOUNDS_LON")," ")))[1]
 lone    <-as.numeric(unlist(strsplit(Sys.getenv("AMET_BOUNDS_LON")," ")))[2]
 bounds  <-c(lats,latn,lonw,lone)

#########################################################################
#	Query Options
#########################################################################
 extra	<-" and (s.ob_network='OTHER-MTR'  or s.ob_network='ASOS' or s.ob_network='MARITIME') "							# Extra query syntax
 extra  <-" and (s.ob_network='ASOS' or s.ob_network='SAO' or s.ob_network='MARITIME') " 
 extra <-" "

#########################################################################
#	Configurable Statistics Definitions
#########################################################################
#                   1       2        3    4      5     6       7    8       9        10       11       12       13     14     15
 statAbr	<-c("count","corr","ac","var","sdev","rmse","mae","bias","mfbias","mnbias","mngerr","nmbias","nmerr","max","min")
 sget	<-c(3,5,6,7,8,14,15)
 vget	<-c(1,2,3,4)
 sfixed	<-c(6,8,3,2,5,7)
 vfixed	<-c(1,2,3)

#########################################################################
#	Auto-Realtime Options
#########################################################################
 realtime	<-FALSE			# Option to run script in real-time automated mode
 daydelay 	<-2			# Option used in real-time mode to lag stats by "n" days

#########################################################################
#----- 			END OF INPUT FILE	------------------------#
#########################################################################
   ys <-as.numeric(substr(date[1],1,4))       # Year Start
   ye <-as.numeric(substr(date[2],1,4))       # Year End
   ms <-as.numeric(substr(date[1],5,6))       # Month to start
   me <-as.numeric(substr(date[2],5,6))       # Month to end
   ds <-as.numeric(substr(date[1],7,8))       # Day of the month to start npa processing
   de <-as.numeric(substr(date[2],7,8))       # Day to end (if mulit-month processing is specified and this value is greater than the number of days in a particular month, the day will be skipped so leave at 31
   hs <-as.numeric(substr(date[1],9,10))      # Hour to start
   he <-as.numeric(substr(date[2],9,10))      # Hour to end
   saveid	<-model

#---------------------------------------------------##
# Various set-up definitions for main plot function
 plotlab=array(,)
 statid<-c("Count","Correlation","Anomaly Correlation","Variance","Standard Deviation","RMSE","Mean Absolute Error",
           "Mean bias","Mean Fractional Bias","Mean Normalized Bias","Mean Normalized Gross Error",
           "Normailized Mean Bias","Normalized mean error","Difference Max Value","Difference of Min Value")
 varid<-c("2 m Temperature (C)","Wind Speed (m/s)","Wind Direction (Deg.)","Mixing Ratio (g/kg)")

 statAbr<-c("count","corr","ac","var","sdev","rmse","mae","bias","mfbias","mnbias","mngerr","nmbias","nmerr","max","min")
 varAbr<-c("T","WS","WD","Q")
 convfactor<-c(1.8,1.94,1,1)
 convfactor<-c(1,1,1,1)

  great	<-gray(0.80)
  good	<-"green"
  fair	<-"blue"
  caut	<-"yellow"
  quest	<-"red"
  bad	<-"black"
#################################################
# Plotting Protocol defnitions (colors, scales, etc)
  levcols<-array(NA,c(length(statid),length(varid),20))
  levs<-array(NA,c(length(statid),length(varid),20))
# Typical Error and bias range w/ color scale
 L1<-c(0,1,2,3,4,5,6,7,8,9,10)
 C1<-c(great,good,fair,caut,quest,bad,bad,bad,bad,bad)
 L2<-c(-4,-3,-2,-1,-0.5,-0.25,0,0.25,0.5,1,2,3,4,5)
 C2<-c(bad,bad,quest,caut,fair,good,great,great,good,fair,caut,quest,bad,bad)
 C2<-rev(rainbow(length(L2)))
 C2[length(L2)/2]<-great

 L1<-c(seq(0.75,3,by=0.25),4,10)
 C1<-tim.colors(length(L1))
 vget	<-c(1,2,3,4)
 sget	<-c(3,6,7,8)


# Error and bias scale for wind direction
 L1wd<-c(0,10,20,30,40,50,60,70,80,90)
 C1wd<-c(gray(.8),"green","blue","blue","yellow","red","red","red","red")
 L2wd<-c(-40,-30,-20,-10,0,10,20,30)
#C2wd<-c("red","yellow","blue","green","green","blue","yellow","red","red")
 C2wd<-rev(rainbow(length(L2wd)))
 C2wd[(length(L2wd)/2)+1]<-great

# Fractional and normalized scales
 L1n<-c(0,5,10,15,20)
 C1n<-c("green","blue","yellow","red","red")
 L2n<-c(-20,-15,-10,-5,0,5,10,15,20)
 C2n<-c("red","yellow","blue","green","green","blue","yellow","red","red")
 C2n<-rev(rainbow(length(L2n)))

# Typical  range w/ color scale for Index of Agreement/Correlation Type plots
 L1iT<-c(0.0,0.5,0.75,0.9,1)
 L1iW<-c(0,0.4,0.6,0.7,0.8,1)
 C1iT<-c("red","yellow","blue","green")
 C1iW<-c("red","yellow","blue","green","green")

     levs[1,,1]<-NA	# Set all count stats to NA (Plot Function will automatically set levels)  
# 	Define Temperature Stat levels and colorscale
     levs[2,1,1:length(L1iT)]<-L1iT; levcols[2,1,1:length(C1iT)]<-C1iT
     levs[3,1,1:length(L1iT)]<-L1iT; levcols[3,1,1:length(C1iT)]<-C1iT

     levs[4,1,1:length(L1)]<-L1;   levcols[4,1,1:length(C1)]<-C1
     levs[5,1,1:length(L1)]<-L1;   levcols[5,1,1:length(C1)]<-C1
     levs[6,1,1:length(L1)]<-L1;   levcols[6,1,1:length(C1)]<-C1
     levs[7,1,1:length(L1)]<-L1;   levcols[7,1,1:length(C1)]<-C1
     levs[8,1,1:length(L2)]<-L2;   levcols[8,1,1:length(C2)]<-C2

     levs[9,1,1:length(L1n)]<-L1n;   levcols[9,1,1:length(C1n)]<-C1n
     levs[10,1,1:length(L2n)]<-L2n;  levcols[10,1,1:length(C2n)]<-C2n
     levs[11,1,1:length(L1n)]<-L1n;  levcols[11,1,1:length(C1n)]<-C1n
     levs[12,1,1:length(L2n)]<-L2n;  levcols[12,1,1:length(C2n)]<-C2n
     levs[13,1,1:length(L1n)]<-L1n;  levcols[13,1,1:length(C1n)]<-C1n
     levs[14,1,1:length(L2)]<-L2;   levcols[14,1,1:length(C2)]<-C2
     levs[15,1,1:length(L2)]<-L2;   levcols[15,1,1:length(C2)]<-C2
##########################################################################
# 	Define Wind Speed Stat levels and colorscale
     levs[2,2,1:length(L1iW)]<-L1iW; levcols[2,2,1:length(C1iW)]<-C1iW
     levs[3,2,1:length(L1iW)]<-L1iW; levcols[3,2,1:length(C1iW)]<-C1iW

     levs[4,2,1:length(L1)]<-L1;   levcols[4,2,1:length(C1)]<-C1
     levs[5,2,1:length(L1)]<-L1;   levcols[5,2,1:length(C1)]<-C1
     levs[6,2,1:length(L1)]<-L1;   levcols[6,2,1:length(C1)]<-C1
     levs[7,2,1:length(L1)]<-L1;   levcols[7,2,1:length(C1)]<-C1
     levs[8,2,1:length(L2)]<-L2;   levcols[8,2,1:length(C2)]<-C2

     levs[9,2,1:length(L1n)]<-L1n;   levcols[9,2,1:length(C1n)]<-C1n
     levs[10,2,1:length(L2n)]<-L2n;  levcols[10,2,1:length(C2n)]<-C2n
     levs[11,2,1:length(L1n)]<-L1n;  levcols[11,2,1:length(C1n)]<-C1n
     levs[12,2,1:length(L2n)]<-L2n;  levcols[12,2,1:length(C2n)]<-C2n
     levs[13,2,1:length(L1n)]<-L1n;  levcols[13,2,1:length(C1n)]<-C1n
     levs[14,2,1:length(L2)]<-L2;   levcols[14,2,1:length(C2)]<-C2
     levs[15,2,1:length(L2)]<-L2;   levcols[15,2,1:length(C2)]<-C2
##########################################################################
# 	Define Wind Direction Stat levels and colorscale
     levs[2,3,1:length(L1wd)]<-L1wd; levcols[2,3,1:length(C1wd)]<-C1wd
     levs[3,3,1:length(L1wd)]<-L1wd; levcols[3,3,1:length(C1wd)]<-C1wd

     levs[4,3,1:length(L1wd)]<-L1wd;   levcols[4,3,1:length(C1wd)]<-C1wd
     levs[5,3,1:length(L1wd)]<-L1wd;   levcols[5,3,1:length(C1wd)]<-C1wd
     levs[6,3,1:length(L1wd)]<-L1wd;   levcols[6,3,1:length(C1wd)]<-C1wd
     levs[7,3,1:length(L1wd)]<-L1wd;   levcols[7,3,1:length(C1wd)]<-C1wd
     levs[8,3,1:length(L2wd)]<-L2wd;   levcols[8,3,1:length(C2wd)]<-C2wd

     levs[9,3,1:length(L1n)]<-L1n;   levcols[9,3,1:length(C1n)]<-C1n
     levs[10,3,1:length(L2n)]<-L2n;  levcols[10,3,1:length(C2n)]<-C2n
     levs[11,3,1:length(L1n)]<-L1n;  levcols[11,3,1:length(C1n)]<-C1n
     levs[12,3,1:length(L2n)]<-L2n;  levcols[12,3,1:length(C2n)]<-C2n
     levs[13,3,1:length(L1n)]<-L1n;  levcols[13,3,1:length(C1n)]<-C1n
     levs[14,3,1:length(L2wd)]<-L2wd;   levcols[14,3,1:length(C2wd)]<-C2wd
     levs[15,3,1:length(L2wd)]<-L2wd;   levcols[15,3,1:length(C2wd)]<-C2wd

##########################################################################
# 	Define Mixing Ratio Stat levels and colorscale
     levs[2,4,1:length(L1iT)]<-L1iT; levcols[2,4,1:length(C1iT)]<-C1iT
     levs[3,4,1:length(L1iT)]<-L1iT; levcols[3,4,1:length(C1iT)]<-C1iT

     levs[4,4,1:length(L1)]<-L1;   levcols[4,4,1:length(C1)]<-C1
     levs[5,4,1:length(L1)]<-L1;   levcols[5,4,1:length(C1)]<-C1
     levs[6,4,1:length(L1)]<-L1;   levcols[6,4,1:length(C1)]<-C1
     levs[7,4,1:length(L1)]<-L1;   levcols[7,4,1:length(C1)]<-C1
     levs[8,4,1:length(L2)]<-L2;   levcols[8,4,1:length(C2)]<-C2

     levs[9,4,1:length(L1n)]<-L1n;   levcols[9,4,1:length(C1n)]<-C1n
     levs[10,4,1:length(L2n)]<-L2n;  levcols[10,4,1:length(C2n)]<-C2n
     levs[11,4,1:length(L1n)]<-L1n;  levcols[11,4,1:length(C1n)]<-C1n
     levs[12,4,1:length(L2n)]<-L2n;  levcols[12,4,1:length(C2n)]<-C2n
     levs[13,4,1:length(L1n)]<-L1n;  levcols[13,4,1:length(C1n)]<-C1n
     levs[14,4,1:length(L2)]<-L2;   levcols[14,4,1:length(C2)]<-C2
     levs[15,4,1:length(L2)]<-L2;   levcols[15,4,1:length(C2)]<-C2
 

